/* Базовая система самоощущения (актуализация доступной информации),
функция поддержвания информационной среды в зависимости от текущй ситуации -
обдщая картина понимания ситуации,
с функцией лени - думать или не думать: мотивированность думать зависит от ситуации, ее опасности. 
Решение что-делать или просто игнорировать ситуацию - важнейший параметр индивидуальной адаптивности. 
Не просто искать способ выйти из опасного состояния, а искать как улучшить состояние, 
каким бы оно ни было вплоть до полной неудовлетворенности существующим, когда поис ведется в любой ситуации.
Нужна функция, определяющая лень с индивидуализированными параметрами 
(м.б. зависящими от более базовых индивид.параментров).
Функция поддерживается системой самоощущения, 
которая работает независимо от активации дерева понимания по каждому пульсу. 

Активация func consciousness - после включения или пробуждения - начало цепочки мыслей,
а так же - по активности дерева (ор.рефлекс) - срабатывает функция делать-неделать.

Кроме гомеостатического инфо.окрыжения psi_information_environment.go
есть psi_information_environment_mental.go куда помещаются результаты информационных функций.
Использует субъективную часть эпизодов памяти - субъективный тип (для записи эпизодов цепочки мыслей).
*/


package psychic

//////////////////////////////
var allowConsciousnessProcess=false // при включении и просыпании - 1 раз


var saveEvolushnStage=0 // сохранение значения уровня осмысления == стадии развития при произвольном изменении уровня


////////////////////////////////////////////////////////////
/* Главная, постоянно активная с каждым пульсом функция поддержвания информационной среды и произвольности.
Изолированная от непосредственных воздействий и поэтому самостоятельная система оценки и корректировки состояния,
происходит с формированием опыта прозвольности выполнения Правил и их выбора для данных условий (psy_Experience.go),
в частности, Правил относительно самого себя (самосознание).

По каждому пульсу система осознания активируется по ор.рефлексу 
(из ор.рефлекса - вызов функции активации самосознания и по результатам - продолжить), 
а если в этот такт нет ор.рефлекса - то из PsychicCountPuls(.
Вид активации - при вызове функции осознания.
activation_type == 0 - не бывает
activation_type == 1 - активация ориентировочным рефлексом новой ситуации
activation_type == 2 - активация "внутренним" (произвольным) ориентировочным рефлексом

В принципе здесь должны исправляться все лажи ответов предыдущих периодов...
*/
func consciousness(activation_type int)(bool){

	if !allowConsciousnessProcess{
		return false
	}

// TODO если период ожидания ответа LastRunAutomatizmPulsCount ??  - УЧЕСТЬ

// ПЕРВЫЙ УРОВЕНЬ, самый примитивный уровень:
	// есть ли штатный мот.автоматизм и нужно ли его менять или задумываться
	if currentAutomatizmAfterTreeActivatedID > 0 {
		am:=AutomatizmSuccessFromIdArr[currentAutomatizmAfterTreeActivatedID]
		if am != nil && am.Belief==2 && am.Usefulness>0{// нормальный, пусть выполняется
			return false
		}
	}
	/////////////////////////////////////////////////////////

	refreshCurrentInformationEnvironment()// нужен для func getSuitableRules
// if CurrentInformationEnvironment.veryActualSituation || CurrentInformationEnvironment.danger{

// ВТОРОЙ УРОВЕНЬ - попытка использования примитивных Правил
	rules:=getSuitableRules(activation_type)
	if rules > 0 {// по правилу найти автоматизм и запустить его
		ta:=TriggerAndActionArr[rules]
		purpose := getPurposeGenetic()
		ai:=ActionsImageArr[ta.Trigger]
		if ai != nil {
			purpose.actionID = ai
			atmzm := createAndRunAutomatizmFromPurpose(purpose)
			if atmzm != nil {
				return true // заблокирвать более низкоуровневое
			}
		}
	}
	/////////////////////////////////////////////////////////


/* ТРЕТИЙ УРОВЕНЬ - попытка найти решение, используя всю текущую инфрмацию с учетом срочности.
   Ментальные автоматизмы нужны только если нет мот.автоматизма или его нужно переделать.
Т.е. привязанный к ветке дерева понимания мент автоматизм должен срабатывать ЗДЕСЬ.
Он продолжается по NextID или даже ветвится в зависимости от ситуации.
А если его еще нет, то создать БАЗОВЫЙ: м.б. сделать редактор базовых в зависимости от Mood, EmotionID и SituationID
Цель автоматизма - PurposeID данного узла - достижение параметров PurposeImage:
или примитивно targetID []int //массив ID парамктров гомеостаза как цели для улучшения в данных условиях
или на следующем уровне - проблемой доминанты Dominanta структура которой ЕЩЕ НЕ ОПРЕДЕЛНА
 */
	// детекция ленивого состояния
	if isIdleness(){
		// пофиг все, можно лениво обрабатывать накопившиеся структуры, реагирование - на уровне - до EvolushnStage < 4
		saveEvolushnStage=EvolushnStage
		EvolushnStage = 3 // нагло и просто :) - произвольный откат уровня осознания

		processingFreeState()// обработка структур в свободном состоянии может быть долгой -

		EvolushnStage=saveEvolushnStage // возвращаем уровень осмысления, иначе зависнет на этой стадии
		return false // пусть выполняется все менее высокоуровневое
	}

// TODO использование ментальных автоматизмов

	/////////////////////////////////////////////////////////


// ЧЕТВЕРТЫЙ УРОВЕНЬ - доминанта нерешенной проблемы - только если нет срочности
	if CurrentInformationEnvironment.veryActualSituation || CurrentInformationEnvironment.danger{
		// TODO






	}else{// нет решения, паника, откатиться на прежний уровень регирования
// TODO аварийное решение проблемы
		return false // пусть выполняется все менее высокоуровневое
	}
	/////////////////////////////////////////////////////////

	// вернуть стадию развития
if saveEvolushnStage >0 {// иначе оно обнуляет EvolushnStage
	EvolushnStage = saveEvolushnStage // возвращаем уровень осмысления
}

return false // не блокировать последующий код ориентировочного рефлекса.
}
////////////////////////////////////////////


///////////////////////////////
// обновление состояния информационной среды
func refreshCurrentInformationEnvironment(){
	///////// Информационная среда осознания ситуации
	// Нужно собрать всю информацию, которая может повлиять на решение.
	//  получение текущего состояния информационной среды: отражение Базового состояния и Активных Базовых контекстов
	GetCurrentInformationEnvironment()

	// оценка опасности ситуации, необходиомсть срочных действий
	veryActualSituation=CurrentInformationEnvironment.veryActualSituation
	// выявить ID парамктров гомеостаза как цели для улучшения в данных условиях
	curTargetArrID=CurrentInformationEnvironment.curTargetArrID

	/* Еще информация:
	жизненный опыт  psy_Experience.go
	доминанта psy_problem_dominanta.go
	субъектиная оценка ситуации для применения произвольности
	*/

	// актуальной инфой являются узлы активной ветки дерева понимания, особенно контекст SituationID
}
///////////////////////////////////////////////


// детекция ленивого состояния
func isIdleness()(bool){
	if veryActualSituation {
		return false
	}

	if isCurrentProblemDominanta != nil{
		return false
	}

	return true
}
///////////////////////////////////////////////////////
// обработка структур в свободном состоянии, в первую очередь - эпизодической памяти
func processingFreeState(){
	// TODO переработка происходившего, в первую очередь - эпизодической памяти
	//EpisodeMemoryLastCalcID - последний эпизод, который был осмыслен в лени или во сне
}
//////////////////////////////////////////////////////
